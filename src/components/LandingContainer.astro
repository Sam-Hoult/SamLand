---


---

<div class="threejs-container">
  <div id="threejs-canvas">
    <div class="loading-spinner"></div>
  </div>
</div>

<script>
    // Update imports to use relative paths if needed
    import * as THREE from 'three';
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';
    import { GCodeLoader } from 'three/examples/jsm/loaders/GCodeLoader.js';
    import { FontLoader } from 'three/addons/loaders/FontLoader.js';
    import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';
    import { EffectComposer } from 'three/addons/postprocessing/EffectComposer.js';
    import { RenderPass } from 'three/addons/postprocessing/RenderPass.js';
    import { UnrealBloomPass } from 'three/addons/postprocessing/UnrealBloomPass.js';
    import { OutputPass } from 'three/addons/postprocessing/OutputPass.js';

    let camera, scene, renderer, composer;
    let modelsLoaded = 0;
    const totalModels = 2; // Updated to include text as a "model"
    let textMesh, gcodeMesh;
    let isInitialized = false;  // Add initialization flag

    // Adjust bloom parameters for a more subtle effect
    const params = {
        threshold: 0.2,     // Increased to reduce bloom on darker areas
        strength: 0.4,      // Reduced from 1.5 to 0.6
        radius: 0.3,        // Reduced from 0.4 to 0.3
        exposure: 0.8       // Reduced from 1 to 0.8
    };

    // Add cleanup function
    function cleanup() {
        if (renderer) {
            renderer.dispose();
            renderer.domElement.remove();
        }
        if (composer) {
            composer.dispose();
        }
        isInitialized = false;  // Reset flag on cleanup
    }

    // Wrap initialization in a function
    function initializeScene() {
        const container = document.getElementById('threejs-canvas');
        if (!container || isInitialized) {
            return; // Exit if no container or already initialized
        }

        isInitialized = true;  // Set flag

        // Reset counter
        modelsLoaded = 0;

        // Initialize using outer scope variables
        const isMobile = window.innerWidth <= 768;
        const fov = isMobile ? 100 : 60;
        camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 1, 1000);
        camera.position.set(0, 20, 0);
        camera.lookAt(0, 17, 0);
        
        scene = new THREE.Scene();
        scene.background = new THREE.Color(0x000000);

         // Add stars
    const starsGeometry = new THREE.BufferGeometry();
    const starsCount = 1000;
    const positions = new Float32Array(starsCount * 3);
    
    // Create random star positions
    for(let i = 0; i < starsCount * 3; i += 3) {
        positions[i] = (Math.random() - 0.5) * 500;      // x
        positions[i + 1] = (Math.random() - 0.5) * 500;  // y
        positions[i + 2] = (Math.random() - 0.5) * 500;  // z
    }
    
    starsGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    
    const starsMaterial = new THREE.PointsMaterial({
        color: 0xffffff,
        size: 0.5,
        transparent: true,
        opacity: 0.8,
        sizeAttenuation: true
    });
    
    const starField = new THREE.Points(starsGeometry, starsMaterial);
    scene.add(starField);

    // Make stars twinkle in the render loop
    starField.rotation.x = 0.2;

        const loader = new GCodeLoader();
        loader.load('models/samland.gcode', function (object) {
            // Change the material color for all line segments
            object.children.forEach(child => {
                if (child instanceof THREE.Line) {
                    child.material = new THREE.LineBasicMaterial({ 
                        color: '#ff00ff',
                        opacity: 0.2,
                        transparent: true
                    });
                }
            });
            
            object.position.set(-155, -20, 150);
            gcodeMesh = object;  // Store reference
            scene.add(object);
            modelsLoaded++;
            checkAllModelsLoaded();
            render();
        });

        // Add text
        const fontLoader = new FontLoader();
        fontLoader.load('/fonts/helvetiker_bold.typeface.json', function (font) {
            const textGeometry = new TextGeometry('SAMLAND', {
                font: font,
                size: 10,
                depth: 2,
                curveSegments: 12,
                bevelEnabled: true,
                bevelThickness: 0.5,
                bevelSize: 0.3,
                bevelOffset: 0,
                bevelSegments: 5
            });

            // Center the geometry itself
            textGeometry.computeBoundingBox();
            textGeometry.center();

            const textMaterial = new THREE.MeshBasicMaterial({ 
                color: '#00ff00',
                wireframe: true 
            });
            textMesh = new THREE.Mesh(textGeometry, textMaterial);
            
            // Center the text
            textGeometry.computeBoundingBox();
            if (textGeometry.boundingBox) {
                const centerOffset = -0.1 * (textGeometry.boundingBox.max.x - textGeometry.boundingBox.min.x);
                textMesh.position.x = centerOffset;
                textMesh.position.y = 17;
            }

            scene.add(textMesh);
            modelsLoaded++;
            checkAllModelsLoaded();
            render();
        });

        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.toneMapping = THREE.ReinhardToneMapping;
        renderer.toneMappingExposure = Math.pow(params.exposure, 4.0);

        // Setup post-processing
        const renderScene = new RenderPass(scene, camera);
        const bloomPass = new UnrealBloomPass(
            new THREE.Vector2(window.innerWidth, window.innerHeight),
            params.strength,
            params.radius,
            params.threshold
        );
        const outputPass = new OutputPass();

        composer = new EffectComposer(renderer);
        composer.addPass(renderScene);
        composer.addPass(bloomPass);
        composer.addPass(outputPass);

        const canvas = document.getElementById('threejs-canvas');
        if (!canvas) throw new Error('Canvas element not found');
        canvas.appendChild(renderer.domElement);
        
        // Fade in the canvas
        requestAnimationFrame(() => {
            canvas.style.opacity = '1';
        });

        const controls = new OrbitControls(camera, renderer.domElement);
        controls.addEventListener('change', render);
        controls.minDistance = 10;
        controls.maxDistance = 200;
        controls.enableZoom = true;
        controls.enablePan = true;
        controls.enabled = false;  // Disable controls initially
        controls.target.set(0, 17, 0);  // Set target to match camera.lookAt position

        // Start camera animation after composer is initialized
        const startTime = performance.now();
        const duration = 4000; // Duration in milliseconds
        const animate = () => {
            const currentTime = performance.now();
            const elapsed = currentTime - startTime;
            const progress = Math.min(elapsed / duration, 1);
            
            // Cubic easing out
            const t = 1 - Math.pow(1 - progress, 3);
            camera.position.set(0, 20, t * 100);
            camera.lookAt(0, 17, 0);
            
            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                // Ensure final camera position and orientation
                camera.position.set(0, 20, 100);
                camera.lookAt(0, 17, 0);
                controls.target.set(0, 17, 0);
                controls.update();  // Update controls before enabling
                controls.enabled = true;  // Enable controls after animation
            }
            render();
        };
        animate();

        // Update mousemove event listener
        canvas.addEventListener('mousemove', (event) => {
            // Calculate normalized mouse position (-1 to 1)
            const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            const mouseY = (event.clientY / window.innerHeight) * 2 - 1;

            // Apply subtle rotation to text if it exists
            if (textMesh) {
                textMesh.rotation.x = mouseY * 0.1;
                textMesh.rotation.y = mouseX * 0.1;
            }

            // Add subtle star movement
            starField.rotation.x = mouseY * 0.05;
            starField.rotation.y = mouseX * 0.05;
            
            render();
        });

        // Update resize handler
        window.addEventListener('resize', function() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            composer.setSize(window.innerWidth, window.innerHeight);
            render();
        });
    }

    function checkAllModelsLoaded() {
        if (modelsLoaded === totalModels) {
            // Hide the loading spinner
            const spinner = document.querySelector('.loading-spinner') as HTMLElement;
            if (spinner) spinner.style.display = 'none';
        }
    }

    function render() {
        composer.render();
    }

    // Initial load
    if (document.getElementById('threejs-canvas')) {
        initializeScene();
    }

    // Handle navigation
    document.addEventListener('astro:page-load', () => {
        if (document.getElementById('threejs-canvas')) {
            initializeScene();
        }
    });

    document.addEventListener('astro:before-preparation', cleanup);
</script>

<style>
  .threejs-container {
    background-color: rgb(var(--black));
  }
  #threejs-canvas {
    position: relative;
    width: 100%;
    height: 100%;
    min-height: 50vh;
    overflow: hidden;
    opacity: 0;  /* Start hidden */
    transition: opacity 1s ease-out;  /* Smooth fade in */
  }

  h1 {
    margin: 0;
    font-size: 1.5em;
    color: #444;
  }

  .loading-spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 50px;
    height: 50px;
    border: 3px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: #fff;
    animation: spin 1s ease-in-out infinite;
  }

  @keyframes spin {
    to { transform: translate(-50%, -50%) rotate(360deg); }
  }

</style>
